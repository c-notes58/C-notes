<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>NoteConnect</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="theme-color" content="#007bff"/>
  <link rel="manifest" href="manifest.json">
  <link rel="icon" href="https://cdn-icons-png.flaticon.com/512/1048/1048941.png">
  <style>
    body { font-family: Arial; padding: 20px; background: #f8f9fa; }
    form { background: #fff; padding: 15px; border-radius: 8px; margin-bottom: 30px; box-shadow: 0 0 10px rgba(0,0,0,0.05); }
    label, select, input, button { display: block; width: 100%; margin-top: 10px; padding: 8px; }
    button { background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }
    button:hover { background: #0056b3; }
    img { max-width: 100px; margin: 10px; border: 1px solid #ccc; }
    .note-grid { display: flex; flex-wrap: wrap; gap: 10px; margin-top: 20px; }
  </style>
</head>
<body>
  <h1>ðŸ“˜ NoteConnect</h1>

  <h2>Want Notes (Student)</h2>
  <form id="student-form">
    <label for="school">School</label>
    <select id="school" required>
      <option value="">--Choose School--</option>
      <option value="ABC School">ABC School</option>
      <option value="XYZ School">XYZ School</option>
    </select>
    <label for="class">Class</label>
    <select id="class" required></select>
    <label for="division">Division</label>
    <select id="division" required></select>
    <button type="submit">Show Notes</button>
  </form>
  <div id="student-notes" class="note-grid"></div>

  <h2>Give Notes (Teacher)</h2>
  <form id="teacher-form">
    <label for="teacher-name">Your Name</label>
    <input type="text" id="teacher-name" required>
    <label for="school-name">School Name</label>
    <input type="text" id="school-name" required>
    <label for="class-select">Class</label>
    <select id="class-select" required></select>
    <label for="division-select">Division</label>
    <select id="division-select" required></select>
    <label for="images">Note Images</label>
    <input type="file" id="images" multiple accept="image/*">
    <button type="submit">Upload Notes</button>
  </form>
  <div id="upload-status"></div>

  <script src="script.js"></script>
  <script>
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('sw.js').then(reg => {
        console.log("âœ… Service Worker registered!", reg);
      });
    }
  </script>
</body>
</html>const classOptions = [...Array(10)].map((_, i) => `<option value="${i+1}">${i+1}</option>`).join('');
const divOptions = "ABCDEFGH".split('').map(d => `<option value="${d}">${d}</option>`).join('');
document.getElementById('class').innerHTML += classOptions;
document.getElementById('division').innerHTML += divOptions;
document.getElementById('class-select').innerHTML += classOptions;
document.getElementById('division-select').innerHTML += divOptions;

const studentForm = document.getElementById("student-form");
const teacherForm = document.getElementById("teacher-form");
const notesContainer = document.getElementById("student-notes");
const uploadStatus = document.getElementById("upload-status");

teacherForm.addEventListener("submit", function(e) {
  e.preventDefault();
  const school = document.getElementById("school-name").value;
  const cls = document.getElementById("class-select").value;
  const div = document.getElementById("division-select").value;
  const files = document.getElementById("images").files;
  const key = `${school}_${cls}_${div}`;
  const stored = JSON.parse(localStorage.getItem(key) || "[]");

  [...files].forEach(file => {
    const reader = new FileReader();
    reader.onload = function(e) {
      stored.push(e.target.result);
      localStorage.setItem(key, JSON.stringify(stored));
    };
    reader.readAsDataURL(file);
  });

  uploadStatus.innerText = "âœ… Notes uploaded!";
  setTimeout(() => uploadStatus.innerText = "", 2000);
});

studentForm.addEventListener("submit", function(e) {
  e.preventDefault();
  const school = document.getElementById("school").value;
  const cls = document.getElementById("class").value;
  const div = document.getElementById("division").value;
  const key = `${school}_${cls}_${div}`;
  const stored = JSON.parse(localStorage.getItem(key) || "[]");

  notesContainer.innerHTML = "";
  if (stored.length === 0) {
    notesContainer.innerHTML = "<p>No notes found.</p>";
  } else {
    stored.forEach(src => {
      const img = document.createElement("img");
      img.src = src;
      notesContainer.appendChild(img);
    });
  }
});self.addEventListener("install", e => {
  e.waitUntil(
    caches.open("noteconnect-cache").then(cache => {
      return cache.addAll(["/", "/index.html", "/script.js", "/manifest.json"]);
    })
  );
});

self.addEventListener("fetch", e => {
  e.respondWith(
    caches.match(e.request).then(response => response || fetch(e.request))
  );
});{
  "name": "NoteConnect",
  "short_name": "C-Notes",
  "start_url": "./index.html",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#007bff",
  "icons": [{
    "src": "https://cdn-icons-png.flaticon.com/512/1048/1048941.png",
    "type": "image/png",
    "sizes": "512x512"
  }]
}
